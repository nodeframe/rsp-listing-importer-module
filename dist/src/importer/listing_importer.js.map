{"version":3,"sources":["importer/listing_importer.ts"],"names":[],"mappings":"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","file":"importer/listing_importer.js","sourcesContent":["import {IListingModel} from \"../model/listing\";\nconst GoogleMapsAPI = require('googlemaps');\nimport Promise = require('bluebird');\n\nexport interface IGooglemapConfig {\n  key: string;\n  stagger_time: number;\n  encode_polylines: boolean;\n}\nexport abstract class ListingImporter {\n  dataMapperKlass:any;\n  gateway:any;\n  db_connection:any;\n  gmap_conf:IGooglemapConfig;\n  source_type:string;\n\n  abstract beginImport():void;\n\n  updateGeocode(listing:IListingModel) {\n    return new Promise((resolve, reject) => {\n      var gmAPI = new GoogleMapsAPI(this.gmap_conf);\n      var maps_params = {address: listing.address.full};\n      gmAPI.geocode(maps_params, (err, result_set) => {\n        if (err) {\n          console.log('ERROR: ' + JSON.stringify(err, null, '  '));\n          reject(err);\n        } else {\n          var result:any;\n          if(result_set.status === 'OK'){\n            if (result_set.results.length > 1) {\n              /* this should be due to some error\n               if the results is more than one, it might be due to the\n               sent address is quite ambiguous\n               */\n              // for now solve it by picking the first one\n              result = result_set.results[0];\n            } else if (result_set.results.length == 1) {\n              // this is the most case\n              result = result_set.results[0];\n            } else {\n              // this is due to some error is occour, the result return nothing\n              reject(`GoogleMapsAPI return unexpected results set with ${result_set.results.length} member`);\n            }\n          } else if(result_set.status === 'ZERO_RESULTS') {\n            return reject(`GoogleMapsAPI return zero results by using maps_params:${JSON.stringify(maps_params)}`);\n          } else {\n            return reject(JSON.stringify(result_set, null, '  '));\n          }\n          listing.address.additional_address = result.address_components;\n          var geo:any = result.geometry;\n          var location:any = {};\n          location.lat = geo.location.lat;\n          location.lon = geo.location.lng;\n          delete geo.location;\n          delete geo.location_type;\n          listing.location = location;\n          listing.location_type = geo.location_type;\n          listing.additional_location = geo;\n          resolve(listing);\n        }\n      });\n    });\n\n  }\n\n  inActiveListings():Promise<any> {\n    return this.db_connection.Listing.updateAsync({\n      status: 'active',\n      source_type: this.source_type\n    }, {\n      $set: {status: 'inactive'}\n    }, {\n      multi: true\n    });\n  }\n}"],"sourceRoot":"./src"}