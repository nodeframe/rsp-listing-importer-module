{"version":3,"sources":["db.ts"],"names":[],"mappings":";AAAA,uBAAmB,UAAU,CAAC,CAAA;AAC9B,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,IAAY,OAAO,WAAM,UAAU,CAAC,CAAA;AAEpC,yBAA4B,mBAAmB,CAAC,CAAA;AAEhD,IAAI,SAAS,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC,GAAG,gBAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,gBAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;AAE3G,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAU/B;IAGE,kBAAoB,MAAsC;QAA9C,sBAA8C,GAA9C,kBAA8C;QAAtC,WAAM,GAAN,MAAM,CAAgC;IAE1D,CAAC;IAEM,0BAAO,GAAd;QACE,IAAI,GAAG,GAAU,eAAa,IAAI,CAAC,MAAM,CAAC,IAAI,SAAI,IAAI,CAAC,MAAM,CAAC,IAAI,SAAI,IAAI,CAAC,MAAM,CAAC,UAAY,CAAC;QAC/F,IAAI,CAAC,EAAE,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,8BAAW,GAAnB;QACE,wBAAa,CAAC,MAAM,CAAC,gBAAgB,EAAE,UAAU,IAAQ,EAAE,MAAa;QAExE,CAAC,CAAC,CAAC;QACH,wBAAa,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC;YACxC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;gBAC5B,IAAI,CAAC,OAAO,CAAC,WAAW;gBACxB,IAAI,CAAC,OAAO,CAAC,IAAI;gBACjB,IAAI,CAAC,OAAO,CAAC,KAAK;gBAClB,IAAI,CAAC,OAAO,CAAC,WAAW;gBACxB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACxB,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC1B,MAAM,CAAC,CAAC,CAAA;YACV,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAgB,SAAS,EAAE,wBAAa,CAAC,CAAC;IACxE,CAAC;IAED,sBAAW,gCAAU;aAArB;YACE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QACjB,CAAC;;;OAAA;IAEM,6BAAU,GAAjB;QACE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;IAClB,CAAC;IACH,eAAC;AAAD,CAvCA,AAuCC,IAAA;AAvCY,gBAAQ,WAuCpB,CAAA","file":"db.js","sourcesContent":["import config from './config';\nimport * as mongoose from 'mongoose';\nimport * as Promise from 'bluebird';\nimport {IListingModel} from './model/listing';\nimport {ListingSchema} from \"./schema/IListing\";\n\nvar db_config = (process.env.NODE_ENV === 'production') ? config.database.production : config.database.dev;\n\nPromise.promisifyAll(mongoose);\n\nexport interface IDatabaseHostConfig {\n  host:string;\n  db_user?:string;\n  db_password?:string;\n  collection:string;\n  port:string;\n}\n\nexport class Database {\n  private db:mongoose.Connection;\n  public Listing:mongoose.Model<IListingModel>;\n  constructor(private config:IDatabaseHostConfig = db_config){\n    // this.connect();\n  }\n\n  public connect() {\n    var uri:string = `mongodb://${this.config.host}:${this.config.port}/${this.config.collection}`;\n    this.db = mongoose.createConnection(uri);\n    this.createModel();\n  }\n\n  private createModel(){\n    ListingSchema.static(\"createFromJSON\", function (json:any, source:string) {\n\n    });\n    ListingSchema.virtual('address.full').get(function () {\n      var add = [this.address.street,\n        this.address.unit_number,\n        this.address.city,\n        this.address.state,\n        this.address.postal_code,\n        this.address.country];\n      add = add.filter(function (v) {\n        return v\n      });\n      return add.join(', ');\n    });\n    this.Listing = this.db.model<IListingModel>(\"Listing\", ListingSchema);\n  }\n\n  public get connection(){\n    return this.db;\n  }\n\n  public disconnect() {\n    this.db.close();\n  }\n}\n"],"sourceRoot":"./src"}